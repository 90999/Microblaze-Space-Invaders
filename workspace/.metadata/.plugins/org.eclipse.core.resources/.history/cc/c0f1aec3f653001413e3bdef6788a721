/*
 * spaceship.c
 *
 *  Created on: Oct 11, 2014
 *      Author: superman
 */

#include "spaceship.h"
#include "charGen.h"

//Spaceship attributes
static Direction moveDir;
static unsigned yPos;

//Spaceship animation variables
static u8 animationState = 0;
static unsigned currentBonus = 0;
unsigned spaceshipTimerExpired = SHOW_SPACESHIP;

//Score look up table
static unsigned randomScore[7] = {
		50, 100, 150, 200, 250, 300, 350,
};

//Spaceship bitmap
const int alienSpaceship[SPACESHIP_HEIGHT] = {
	packWord32(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
	packWord32(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
	packWord32(0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0),
	packWord32(0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0),
	packWord32(0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0),
	packWord32(0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0),
	packWord32(0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0),
	packWord32(0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0),
	packWord32(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packWord32(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packWord32(0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0),
	packWord32(0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0),
	packWord32(0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
	packWord32(0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
};


/**
 *	placeSpaceship:
 *	---------------
 *	Initializes the spaceship on the screen
 */
void placeSpaceship(void){

	spaceshipTimerExpired = MOVE_SPACESHIP;     //Set the timer to start moving the spaceship
	moveDir = (getRandomNumber() % 2) ? RIGHT : LEFT;   //Randomly place it on the right or left
	yPos = (moveDir == RIGHT) ? START_LEFT : START_RIGHT ;
	drawSpaceship();
}

/*
 *	drawSpaceship:
 *	--------------
 *	Draws the spaceship to the frame buffer at its current position
 */
void drawSpaceship(void){
	int row, col, i, j;

	for( row = SPACESHIP_ROW, i = 0 ; row < SPACESHIP_ROW + SPACESHIP_HEIGHT; row++, i++)
		for(col = yPos, j = 0; col < yPos + SPACESHIP_WIDTH; col++, j++) {
			framePointer0[row*640 + col] = !(alienSpaceship[i] & (1 << j)) ? BLACK : RED;  //todo: maybe instead of drawing black, draw nothing..
	}
}

/**
 *	moveSpaceship:
 *	--------------
 *	Moves the spaceship right or left depending on its current direction
 */
void moveSpaceship(void){
	if(moveDir == RIGHT)
		moveSpaceshipRight();
	else
		moveSpaceshipLeft();
}

/*
 *	moveSpaceshipRight
 *	------------------
 *	Moves the spaceship right by a constant number of pixels.
 *	Also deletes the part of the spaceship that is no longer valid.
 */
void moveSpaceshipRight(void){
	int row, col;

	//if the spaceship has reached the edge of the screen, erase it
	if ( yPos > START_RIGHT )
		eraseSpaceship(F);
	else {
		//erase invalid part of the spaceship
		for( row = SPACESHIP_ROW; row < SPACESHIP_ROW + SPACESHIP_HEIGHT; row++)
			for(col = yPos; col < yPos + SPACESHIP_MOVE_AMOUNT; col++)
				framePointer0[row*640 + col] = BLACK;

		yPos += SPACESHIP_MOVE_AMOUNT;

		drawSpaceship();
	}
}
/*
 *	moveSpaceshipLeft
 *	------------------
 *	Moves the spaceship left by a constant number of pixels.
 *	Also deletes the part of the spaceship that is no longer valid.
 */
void moveSpaceshipLeft(void){
	int row, col;

	//if the spaceship has reached the edge of the screen, erase it
	if ( yPos < START_LEFT )
		eraseSpaceship(F);
	else {
		//erase part of the spaceship
		for( row = SPACESHIP_ROW; row < SPACESHIP_ROW + SPACESHIP_HEIGHT; row++)
			for(col = yPos + SPACESHIP_WIDTH - SPACESHIP_MOVE_AMOUNT ; col < yPos + SPACESHIP_WIDTH; col++)
				framePointer0[row*640 + col] = BLACK;

		yPos -= SPACESHIP_MOVE_AMOUNT;

		drawSpaceship();
	}
}

/*
 * eraseSpaceship:
 * ---------------
 * Erases the spaceship from the screen.
 *
 * hit: True if the reason we are erasing the spaceship was because it was hit.
 * 		Used to set the spaceship timer accordingly.
 */
void eraseSpaceship(Boolean hit){
	int row, col, i, j;

	for( row = SPACESHIP_ROW, i = 0 ; row < SPACESHIP_ROW + SPACESHIP_HEIGHT; row++, i++)
		for(col = yPos, j = 0; col < yPos + SPACESHIP_WIDTH; col++, j++)
			framePointer0[row*640 + col] = BLACK;

	//change the max timer of the spaceship timer to the correct value
	spaceshipTimerExpired = (hit == T) ? ANIMATE_BONUS : SHOW_SPACESHIP;
}

/**
 *	spaceshipHit:
 *	-------------
 *	This function is called when the spaceship has been hit by the tank bullet. it
 *	1.) Erases the spaceship
 *	2.) Randomly assigns a bonus value
 *	3.) Increments the score
 */
void spaceshipHit(void){

	eraseSpaceship(T);
	currentBonus = randomScore[getRandomNumber()%7] ; //randomly selects a bonus value
	incrementScore(currentBonus); //increments the score
}

/**
 * animateBonus:
 * ------------
 * Changes the animation state of the bonus, and prints it to the screen
 */
void animateBonus(void){
	++animationState

	if((animationState > 5 && animationState < 16))
		return;
	else if(++animationState & 1){
		setTextColor(OFF_WHITE);
		printScore(currentBonus, SPACESHIP_ROW, yPos, F);
	}
	else
		eraseNumber(3, SPACESHIP_ROW, yPos);

	if(animationState == 16) {
		spaceshipTimerExpired = SHOW_SPACESHIP;
		animationState = 0;
	}

}

Boolean spaceshipInAir(void){
	if(spaceshipTimerExpired == MOVE_SPACESHIP)
		return T;

	return F;
}


